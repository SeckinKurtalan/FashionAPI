openapi: 3.1.0
x-stoplight:
  id: mjdz7pc9ysr5g
info:
  title: FashionAPI
  version: '1.0'
  contact:
    name: github
    url: 'https://github.com/SeckinKurtalan/FashionAPI'
  summary: A RESTful API project for our internship project.
  description: A RESTful API project for our internship project.
servers:
  - url: 'http://localhost:3000'
paths:
  '/product/{productId}':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    get:
      summary: Get Product Info by Product ID
      tags: []
      operationId: get-product-productId
      description: Retrieve the information of the product with the matching product ID.
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples: {}
      parameters: []
    patch:
      summary: Update User Information
      operationId: patch-product-productId
      description: Update the information of an existing product.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                productCode:
                  type: string
                category:
                  type: string
                price:
                  type: number
                  format: float
                size:
                  type: string
                date:
                  type: string
                  format: date-time
            examples:
              Example 1:
                value:
                  url: www.koton.com/123123
                  productCode: '123123123'
                  category: string
                  price: 199.99
                  size: XXL
        description: The PATCH request body parameters are optional.
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                Example 1:
                  value:
                    message: 'Unknown colum name : pricw'
        '404':
          description: Not Found
    delete:
      summary: ''
      operationId: delete-product-productId
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      description: Delete a product with the matching product ID.
  /product:
    post:
      summary: Create New User
      operationId: post-product
      description: Create a new product.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                Example 1:
                  value:
                    message: 'Unknown column name : pricw'
    parameters: []
    get:
      summary: ''
      operationId: get-product
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
      description: Search product with filters.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: object
                  properties:
                    value:
                      type: string
                price:
                  type: object
                  properties:
                    filterType:
                      type: string
                      enum:
                        - lower
                        - higher
                        - between
                    value:
                      type: string
                size:
                  type: object
                  properties:
                    value:
                      type: string
                date:
                  type: object
                  properties:
                    filterType:
                      type: string
                      enum:
                        - before
                        - after
                    value:
                      type: string
                      format: date-time
            examples:
              Example 1:
                value:
                  category:
                    value: women
                  price:
                    filterType: lower
                    value: '99.90'
                  size:
                    value: XXL
                  date:
                    filterType: after
                    value: '2019-08-24T14:15:22Z'
        description: ''
components:
  schemas:
    Product:
      title: Product
      x-stoplight:
        id: 9nvw55qlr32d9
      type: object
      properties:
        id:
          type: string
        url:
          type: string
        productCode:
          type: string
        category:
          type: string
        price:
          type: number
          format: float
        size:
          type: string
        date:
          type: string
          format: date-time
      required:
        - id
